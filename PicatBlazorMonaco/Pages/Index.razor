@page "/"
<label>
    Compiler Web Service IP:
    <input @bind="ServiceIP" />
    <button @onclick="TestServiceConnection" style="background-color: @StatusColor">Test</button>
</label>
<br />
<select @onchange="SampleSelected">
    <option>-- samples --</option>
    @foreach (var item in Samples)
    {
        <option value="@item.Item1">@item.Item1</option>
    }
</select>

<MonacoEditor @ref="_editor"
              Id="sample-code-editor-123"
              ConstructionOptions="EditorConstructionOptions"
              OnDidInit="EditorOnDidInit"
              OnKeyDown="OnKeyDown"
              OnKeyUp="OnKeyUp"/>

<label>
    Goal:
    <input @bind="Goal" style="width:800px" @bind:event="oninput"
           @onkeydown="RunKeyPress" />
    <button @onclick="RunGoal">Run</button>
</label>

<textarea @bind="Output" @ref="outputElement" @ondblclick="OutputDoubleClick" style="width:100%;height:200px" readonly="readonly" />

@using Ast2
@using PicatBlazorMonaco.Ast
@using System.Net
@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.AspNetCore.WebUtilities;
@using BlazorMonaco;
@using System.Timers;

@inject HttpClient Http
@inject NavigationManager NavManager
@code {
    public ElementReference outputElement { get; set; }
    private bool _initializedSuggestionDetail = false;
    private List<(string, string)> Samples { get; set; } = Examples.Samples;
    private string ServiceIP { get; set; } = "localhost:8701";
    private string StatusColor { get; set; }
    private string Goal { get; set; } = "main.";
    private string Output { get; set; }
    private Ast2Editor _astEditor { get; set; }
    private MonacoEditor _editor { get; set; }
    [Inject] IJSRuntime _jsRuntime { get; set; }
    private DotNetObjectReference<Index> objRef;
    private Timer aTimer;


    private string ValueToSet { get; set; }

    [JSInvokable]
    public async Task<BlazorMonaco.Range> GetDefinitionRange(Position pos) => await this._astEditor.GetDefinition(pos);

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        StandaloneEditorConstructionOptions options = Ast2Editor.GetEditorOptions();

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code) && !string.IsNullOrWhiteSpace(code))
        {
            options.Value = WebUtility.UrlDecode(code);
        }

        return options;
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        aTimer = new Timer(1000);
        aTimer.Elapsed += OnUserFinish;
        aTimer.AutoReset = false;

        objRef = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync(@"setDotNetHelper", objRef);

        string builtins = await Http.GetStringAsync("builtins.txt");
        BuiltIns.InitializeFunctions(builtins);

        this._astEditor = new Ast2Editor(_editor, _jsRuntime);
        await this._astEditor.Init();

        await _editor.AddAction("runSnippet", "Run selected snippet", new[] { (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_R }, null, null, "_picat", 1, async (x, y) =>
        {
            TextModel m = await this._editor.GetModel();
            Selection s = await this._editor.GetSelection();
            string val = await m.GetValueInRange(s, EndOfLinePreference.TextDefined);
            this.Goal = val;
            await this.RunGoal(null);
        });
    }

    private async Task TestServiceConnection(MouseEventArgs mouse)
    {
        try
        {
            this.Output = "Working...";
            this.StatusColor = "gray";
            await InvokeAsync(StateHasChanged);

            string s = await Http.GetStringAsync($@"http://{ServiceIP}/?goal=--v");
            this.Output = DateTime.Now.ToLongTimeString() + "\r\n" + s;

            if (s.Contains("version"))
            {
                this.StatusColor = "green";
            }
            else
            {
                this.StatusColor = "orange";
            }
        }
        catch (Exception ex)
        {
            this.StatusColor = "red";
            this.Output = DateTime.Now.ToLongTimeString() + "\r\nFailed\r\n" + ex.Message;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);

        }
    }

    private async Task RunGoal(MouseEventArgs mouse)
    {
        try
        {
            this.Output = "Working...";
            this.StatusColor = "gray";
            await InvokeAsync(StateHasChanged);

            string orgProgram = await _editor.GetValue();

            try
            {
                await this._astEditor.UpdateDeclarations(orgProgram);
            }
            catch (Exception ex)
            {
                await this._astEditor.ConsoleError(ex.Message);
            }

            string program = WebUtility.UrlEncode(orgProgram);
            string goal = Goal.Trim();

            Http.Timeout = TimeSpan.FromSeconds(15);
            string s = await Http.GetStringAsync($@"http://{ServiceIP}/?goal={WebUtility.UrlEncode(goal)}&program={program}");
            this.Output = DateTime.Now.ToLongTimeString() + "\r\nPicat> " + goal + "\r\n" + s;
            this.StatusColor = "green";
            _ = await this._astEditor.UpdateErrors(s);
        }
        catch (Exception ex)
        {
            this.StatusColor = "red";
            this.Output = DateTime.Now.ToLongTimeString() + "\r\nFailed\r\n" + ex.Message;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task OnKeyDown(KeyboardEvent keyboard)
    {

        if (keyboard.CtrlKey && keyboard.KeyCode == KeyCode.Space)
        {
            await this._astEditor.RefreshCompletions();
        }

        if (!_initializedSuggestionDetail)
        {
            _initializedSuggestionDetail = true;
            await Task.Delay(1000);
            using JsonDocument doc2 = JsonDocument.Parse(@"{}");
            JsonElement root2 = doc2.RootElement;
            await _editor.Trigger("api", "toggleSuggestionDetails", root2);
        }
    }

    private async Task OnKeyUp(KeyboardEvent keyboard)
    {
        // remove previous one
        aTimer.Stop();

        // new timer
        aTimer.Start();
    }

    private async Task RunKeyPress(KeyboardEventArgs keyboard)
    {
        if (keyboard.Key != "Enter")
        {
            return;
        }

        await this.RunGoal(null);
    }

    private async Task SampleSelected(ChangeEventArgs ev)
    {
        string selection = ev.Value.ToString();
        string code = this.Samples.SingleOrDefault(x => x.Item1 == selection).Item2;

        if (code != null)
        {
            await this._editor.SetValue(code);
            await this._astEditor.UpdateDeclarations(code);
        }
    }

    private async Task OutputDoubleClick(MouseEventArgs mouse)
    {
        int pos = await _astEditor.GetSelectionStart(this.outputElement);
        var lineIndex = this.Output.Take(pos).Count(c => c == '\n');
        string[] lines = this.Output.Split("\n");
        await _astEditor.MoveToError(lines[lineIndex]);
    }

    private void OnUserFinish(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            try
            {
                string program = await _editor.GetValue();
                await this._astEditor.UpdateDeclarations(program);


                program = WebUtility.UrlEncode(program);
                Http.Timeout = TimeSpan.FromSeconds(2);
                string s = await Http.GetStringAsync($@"http://{ServiceIP}/?goal=--c&program={program}");
                this.Output = DateTime.Now.ToLongTimeString() + "\r\n" + s;
                this.StatusColor = "green";
                _ = await this._astEditor.UpdateErrors(s);
            }

            catch (Exception ex)
            {
                this.StatusColor = "red";
                await this._astEditor.ConsoleError(ex.Message);
            }
            finally
            {
                StateHasChanged();
            }
        });
    }
}